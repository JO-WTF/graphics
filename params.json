{
  "name": "Graphics",
  "tagline": "A console based graphics engine for simple ASCII games and animations.",
  "body": "Python Text Based Graphics Module\r\n=================================\r\n\r\nThis is a console based python3 graphics engine for simple Unicode games or animations.\r\n\r\n[`clock.py`](http://github.com/olls/graphics/blob/master/clock.py), [`terrain.py`](http://github.com/olls/graphics/blob/master/terrain.py), [`road.py`](http://github.com/olls/graphics/blob/master/road.py)[`input_example.py`](http://github.com/olls/graphics/blob/master/input_example.py) and [`circle.py`](http://github.com/olls/graphics/blob/master/circle.py) are example programs using the module (Note: `<` and `>` are used instead of arrow keys.), also see [grit96](http://github.com/grit96)'s [Physics Engine](http://github.com/grit96/physics-engine) which uses this module.\r\n\r\n![terrain.py](https://raw2.github.com/olls/graphics/master/terrain.png \"terrain.py\")\r\n![road.py](https://raw2.github.com/olls/graphics/master/road.png \"road.py\")\r\n![clock.py](https://raw2.github.com/olls/graphics/master/clock.png \"clock.py\")\r\n\r\nUsage\r\n-----\r\n\r\nSimple usage example:\r\n\r\n```python\r\nimport graphics as g\r\n\r\n# Create the canvas, 20x20 pixels (characters).\r\nscreen = g.Canvas(size = (20, 20))\r\n\r\n# Create a circle image, radius 5 pixels.\r\ncircleImage = g.shapes.Circle(5)\r\n\r\n# Create a green sprite at position (7, 7) with the circle image.\r\ncircleSprite = g.Sprite(circleImage,\r\n                        position = (7, 7),\r\n                        color = g.colors.GREEN)\r\n\r\n# Add the sprite to the canvas.\r\nscreen.sprites.append(circleSprite)\r\n\r\n# Output the canvas to the terminal.\r\nprint(screen)\r\n\r\n# Increase the circles radius by two.\r\ncircleSprite.image.radius += 2\r\n\r\n# Output the canvas to the terminal.\r\nprint(screen)\r\n```\r\n\r\nCompatibility\r\n-------------\r\n\r\nThis module was written and tested with python3 on Debian with gnome-terminal. It should work with most Linux terminals, but some things might be off.\r\n- Colours should work if your terminal supports them, otherwise they won't cause any problems.\r\n- The input module supports Windows, Mac and Unix. Linux works fine and testing is in progress for Windows.\r\n- In the Windows CMD it doesn't centre properly, colours don't work, it was slow and input doesn't work.\r\n\r\n[`console.py`](http://github.com/olls/graphics/blob/master/graphics/console.py) is a small script to determine the terminal size. Works in my gnome-terminal in Debian, probably wont work in all environment. It was modified from [Stack Overflow](http://stackoverflow.com/a/3051350/1841416).\r\n\r\n[`colors.py`](http://github.com/olls/graphics/blob/master/graphics/colors.py) has functions for adding the correct escapes to strings to color them, modified from [a blog](http://blog.mathieu-leplatre.info/colored-output-in-console-with-python.html), also not sure about environment support.\r\n\r\n[`nbinput.py`](http://github.com/olls/graphics/blob/master/graphics/nbinput.py) an object to get non blocking input in the terminal, this only works in Linux terminals. This was modified from [code.activestate.com](http://code.activestate.com/recipes/134892/#c5).\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/olls/graphics/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n",
  "google":"UA-47805203-1",
  "note":"Don't delete this file! It's used internally to help with page regeneration."
}
